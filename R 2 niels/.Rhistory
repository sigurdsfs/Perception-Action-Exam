mt_plot_aggregate(
m,
use = 'tn_align_trajec',
color = 'trial_type'
) +
labs(
title = 'Aggregated time-normalized mouse trajectories')
mt_plot(
m,
use = 'tn_trajectories',
color = 'trial_type'
)
#Final prep of data.
#Make the end and start point together.
m_test <- mt_align(
m,
use = "tn_trajectories",
save_as = "tn_align_trajec",
dimensions = c("xpos", "ypos"),
coordinates = "isotropic",
align_start = TRUE ,
align_end = TRUE,
align_side = "yes",
verbose = FALSE
)
mt_plot(
m,
use = 'tn_trajectories',
color = 'trial_type'
)
mt_plot(
m_test,
use = 'tn_trajectories',
color = 'trial_type'
)
m <- mt_measures(
m,
use = 'tn_trajectories')
mt_check_bimodality(m,
use_variables=c("MAD", "AD"),
grouping_variables="trial_type")
mt_check_bimodality(m,
use_variables=c("MAD", "AD"), methods = c("BC", "HDS"), grouping_variables="trial_type")
mt_check_bimodality(m,
use_variables=c("MAD", "AD"), grouping_variables="trial_type")
mt_check_bimodality(m,
use_variables=c("MAD", "AD"), methods = c("BC", "HDS"), grouping_variables="trial_type")
#mt_check_bimodality(m, use_variables=c("MAD", "AD"), methods = c("BC", "HDS"), grouping_variables="trial_type")
mt_check_bimodality(m, use_variables=c("AD"), methods = c("BC", "HDS"), grouping_variables="trial_type")
#mt_check_bimodality(m, use_variables=c("MAD", "AD"), methods = c("BC", "HDS"), grouping_variables="trial_type")
mt_check_bimodality(m, use_variables=c("MAD", "AD"), methods = c("BC"), grouping_variables="trial_type")
m_scaled <- mt_scale_trajectories(
m,
use = "tn_align_trajec",
save_as = "final_trajec",
c("xpos", "ypos"),
center = TRUE,
scale = TRUE,
within_trajectory = FALSE,
prefix = "z_",
transform = NULL
)
#mt_check_bimodality(m, use_variables=c("MAD", "AD"), methods = c("BC", "HDS"), grouping_variables="trial_type")
mt_check_bimodality(m, use_variables=c("MAD", "AD"), methods = c("BC"), grouping_variables="trial_type")
mt_check_bimodality(m_scaled, use_variables=c("MAD", "AD"), methods = c("BC"), grouping_variables="trial_type")
m_scaled <- mt_scale_trajectories(
m,
use = "tn_align_trajec",
save_as = "final_trajec",
c("xpos", "ypos"),
center = TRUE,
scale = TRUE,
within_trajectory = FALSE,
prefix = "z_",
transform = NULL
)
m_scaled <- mt_measures(
m_scaled,
use = 'final_trajec')
m_scaled <- mt_scale_trajectories(
m,
use = "tn_align_trajec",
save_as = "final_trajec",
c("xpos", "ypos"),
center = TRUE,
scale = TRUE,
within_trajectory = FALSE,
prefix = "z_",
transform = NULL
)
m_scaled <- mt_measures(
m_scaled,
use = 'z_final_trajec')
m_scaled <- mt_scale_trajectories(
m,
use = "tn_align_trajec",
save_as = "final_trajec",
c("xpos", "ypos"),
center = TRUE,
scale = TRUE,
within_trajectory = FALSE,
prefix = "z_",
transform = NULL
)
m_scaled <- mt_measures(
m_scaled,
use = 'final_trajec')
#mt_check_bimodality(m, use_variables=c("MAD", "AD"), methods = c("BC", "HDS"), grouping_variables="trial_type")
mt_check_bimodality(m, use_variables=c("MAD", "AD"), methods = c("BC"), grouping_variables="trial_type")
mt_check_bimodality(m_scaled, use_variables=c("MAD", "AD"), methods = c("BC"), grouping_variables="trial_type")
m_scaled <- mt_standardize(m, use = "measures",
use_variables = 'tn_aling_trajec',
save_as = 'final_trajec',
within = NULL,
prefix = "z_",
center = TRUE,
scale = TRUE
)
m_scaled <- mt_standardize(m, use = "measures",
use_variables = 'tn_aling_trajec',
within = NULL,
prefix = "z_",
center = TRUE,
scale = TRUE
)
mt_example <- mt_measures(m)
# Standardize MAD and AD per subject
mt_example <- mt_standardize(mt_example,
use_variables=c("MAD", "AD"),
within="subject_nr", prefix="z_")
m_scaled <- mt_scale_trajectories(
m,
use = "tn_align_trajec",
save_as = "final_trajec",
c("xpos", "ypos"),
center = TRUE,
scale = TRUE,
within_trajectory = FALSE,
prefix = "z_",
transform = NULL
)
m_scaled <- mt_measures(
m_scaled,
use = 'final_trajec')
#mt_check_bimodality(m, use_variables=c("MAD", "AD"), methods = c("BC", "HDS"), grouping_variables="trial_type")
mt_check_bimodality(m, use_variables=c("MAD", "AD"), methods = c("BC"), grouping_variables="trial_type")
mt_check_bimodality(m_scaled, use_variables=c("MAD", "AD"), methods = c("BC"), grouping_variables="trial_type")
mt_check_bimodality(mt_example, use_variables=c("MAD", "AD"), methods = c("BC"), grouping_variables="trial_type")
m_scaled <- mt_measures(
m,
use = 'final_trajec')
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(readbulk)
pacman::p_load(MASS,lme4,GGally,ggpubr, reshape, boot)
pacman::p_load(ellipse, tidyverse, Hmisc)
pacman::p_load(pROC, devtools, reshape2, mousetrap)
pacman::p_load(lmerTest)
spivey_df <- read_bulk("../Our_data/", extension = "csv")
spivey_df_short <- spivey_df %>%
dplyr::select(left_stimuli_1, right_stimuli_1, timestamps_mouse, sound, practice, timestamps_mouse, xpos_mouse, ypos_mouse, response, response_time, count_trial_sequence, correct_response, correct, subject_nr, trial_type, live_row )
#write_csv(spivey_df_short, "mouse_spivey_short.csv")
spivey_df_short <- spivey_df_short %>%
filter(practice != "yes")
t_test_accuracy <- spivey_df_short %>%
group_by(subject_nr, trial_type) %>%
dplyr::summarise(subject_accuracy = 1-sum(correct)/n())
t.test(t_test_accuracy$subject_accuracy ~ t_test_accuracy$trial_type)
#model_accuracy <- lmerTest::lmer(correct~trial_type + (1|subject_nr), data = spivey_df_short)
#summary(model_accuracy)
spivey_df_filter <- spivey_df_short %>%
filter(correct == 1)
t_test_response_time <- spivey_df_filter %>%
group_by(subject_nr, trial_type) %>%
dplyr::summarise(mean_response_time = mean(response_time))
t_test_response_time_wide <- pivot_wider(t_test_response_time, names_from = trial_type, values_from = mean_response_time)
t.test(t_test_response_time_wide$control, t_test_response_time_wide$cohort, paired = TRUE, alternative = "two.sided")
mean(t_test_response_time_wide$cohort)
mean(t_test_response_time_wide$control)
model_response_time <- lmerTest::lmer(response_time~trial_type + (1|subject_nr), data = spivey_df_filter)
summary(model_response_time)
#Subset for Accuracy == TRUE.
spivey_df_short_correct <- subset(spivey_df_short, correct == 1)
spivey_df_shot_correct <- subset(spivey_df_short_correct, practice == "no")
#TUrn Subject into factor
spivey_df_short_correct$subject_nr <- factor(spivey_df_short_correct$subject_nr)
#creating mouse_trap object, extracting initiation times and creating a dataframe with only the relevant information
m <- mt_import_mousetrap(spivey_df_short_correct)
m_measures <- mt_measures(m)
data_initiation_time <- data.frame(subject_nr = spivey_df_short_correct$subject_nr, trial_type = spivey_df_short_correct$trial_type, initiation_time = m_measures$measures$initiation_time)
head(data_initiation_time)
t_test_initiation_time <- data_initiation_time %>%
group_by(subject_nr, trial_type) %>%
dplyr::summarise(mean_initiation_time = mean(initiation_time))
t_test_initiation_time_wide <- pivot_wider(t_test_initiation_time, names_from = trial_type, values_from = mean_initiation_time)
t.test(t_test_initiation_time_wide$control, t_test_initiation_time_wide$cohort, paired = TRUE, alternative = "two.sided")
mean(t_test_initiation_time_wide$control)
mean(t_test_initiation_time_wide$cohort)
model_initiation_time <- lmerTest::lmer(initiation_time~trial_type + (1|subject_nr), data = data_initiation_time)
summary(model_initiation_time)
data_duration_time <- data.frame(subject_nr = spivey_df_short_correct$subject_nr, trial_type = spivey_df_short_correct$trial_type, duration_time = spivey_df_short_correct$response_time - m_measures$measures$initiation_time, response_time = spivey_df_short_correct$response_time, initiation_time = m_measures$measures$initiation_time)
head(data_duration_time)
t_test_duration_time <- data_duration_time %>%
group_by(subject_nr, trial_type) %>%
dplyr::summarise(mean_duration_time = mean(duration_time))
t_test_duration_time_wide <- pivot_wider(t_test_duration_time, names_from = trial_type, values_from = mean_duration_time)
t.test(t_test_duration_time_wide$control, t_test_duration_time_wide$cohort, paired = TRUE, alternative = "two.sided")
mean(t_test_duration_time_wide$control)
mean(t_test_duration_time_wide$cohort)
model_duration_time <- lmerTest::lmer(duration_time~trial_type + (1|subject_nr), data = data_duration_time)
summary(model_duration_time)
#remap
m <- mt_remap_symmetric(
m,
use = 'trajectories',
remap_xpos = "left"
)
m_exclude_initiation <- mt_exclude_initiation(m)
m_exclude_initiation <- mt_time_normalize(m_exclude_initiation, nsteps = 101) #creates tn_trajectories
# if we do not exclude initiation, the following should be done
#m <- mt_time_normalize(m, nsteps = 101) #creates tn_trajectories
m <- m_exclude_initiation
#as.data.frame(m$tn_trajectories)
#Final prep of data.
#Make the end and start point together.
m <- mt_align(
m,
use = "tn_trajectories",
save_as = "tn_align_trajec",
dimensions = c("xpos", "ypos"),
coordinates = "isotropic",
align_start = TRUE ,
align_end = TRUE,
align_side = "no",
verbose = FALSE
)
m <- mt_scale_trajectories(
m,
use = "tn_align_trajec",
save_as = "final_trajec",
c("xpos", "ypos"),
center = TRUE,
scale = TRUE,
within_trajectory = FALSE,
prefix = "z_",
transform = NULL
)
m <- mt_measures(m, use = 'final_trajec')
#m <- mt_measures(m, use = 'tn_trajectories')
#mt_check_bimodality(m, use_variables=c("MAD", "AD"), methods = c("BC", "HDS"), grouping_variables="trial_type")
mt_example <- mt_standardize(m, use_variables=c("MAD", "AD"), within="subject_nr")
#mt_example <- mt_standardize(mt_example,use_variables=c("MAD", "AD"), within=c("subject_nr", "Condition"), prefix="z_")
mt_check_bimodality(mt_example, use_variables=c("MAD", "AD"), methods = c("BC"), grouping_variables="trial_type")
mt_check_bimodality(mt_example, use_variables=c("z_MAD", "z_AD"), methods = c("BC"), grouping_variables="trial_type")
#mt_check_bimodality(m, use_variables=c("MAD", "AD"), methods = c("BC", "HDS"), grouping_variables="trial_type")
#mt_example <- mt_standardize(m, use_variables=c("MAD", "AD"), within="subject_nr")
mt_example <- mt_standardize(m,use_variables=c("MAD", "AD"), within=c("subject_nr", "trial_type"), prefix="z_")
mt_check_bimodality(mt_example, use_variables=c("MAD", "AD"), methods = c("BC"), grouping_variables="trial_type")
mt_check_bimodality(mt_example, use_variables=c("z_MAD", "z_AD"), methods = c("BC"), grouping_variables="trial_type")
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(readbulk)
pacman::p_load(MASS,lme4,GGally,ggpubr, reshape, boot)
pacman::p_load(ellipse, tidyverse, Hmisc)
pacman::p_load(pROC, devtools, reshape2, mousetrap)
pacman::p_load(lmerTest)
spivey_df <- read_bulk("../Our_data/", extension = "csv")
spivey_df_short <- spivey_df %>%
dplyr::select(left_stimuli_1, right_stimuli_1, timestamps_mouse, sound, practice, timestamps_mouse, xpos_mouse, ypos_mouse, response, response_time, count_trial_sequence, correct_response, correct, subject_nr, trial_type, live_row )
#write_csv(spivey_df_short, "mouse_spivey_short.csv")
spivey_df_short <- spivey_df_short %>%
filter(practice != "yes")
t_test_accuracy <- spivey_df_short %>%
group_by(subject_nr, trial_type) %>%
dplyr::summarise(subject_accuracy = 1-sum(correct)/n())
t.test(t_test_accuracy$subject_accuracy ~ t_test_accuracy$trial_type)
#model_accuracy <- lmerTest::lmer(correct~trial_type + (1|subject_nr), data = spivey_df_short)
#summary(model_accuracy)
spivey_df_filter <- spivey_df_short %>%
filter(correct == 1)
t_test_response_time <- spivey_df_filter %>%
group_by(subject_nr, trial_type) %>%
dplyr::summarise(mean_response_time = mean(response_time))
t_test_response_time_wide <- pivot_wider(t_test_response_time, names_from = trial_type, values_from = mean_response_time)
t.test(t_test_response_time_wide$control, t_test_response_time_wide$cohort, paired = TRUE, alternative = "two.sided")
mean(t_test_response_time_wide$cohort)
mean(t_test_response_time_wide$control)
model_response_time <- lmerTest::lmer(response_time~trial_type + (1|subject_nr), data = spivey_df_filter)
summary(model_response_time)
#Subset for Accuracy == TRUE.
spivey_df_short_correct <- subset(spivey_df_short, correct == 1)
spivey_df_shot_correct <- subset(spivey_df_short_correct, practice == "no")
#TUrn Subject into factor
spivey_df_short_correct$subject_nr <- factor(spivey_df_short_correct$subject_nr)
#creating mouse_trap object, extracting initiation times and creating a dataframe with only the relevant information
m <- mt_import_mousetrap(spivey_df_short_correct)
m_measures <- mt_measures(m)
data_initiation_time <- data.frame(subject_nr = spivey_df_short_correct$subject_nr, trial_type = spivey_df_short_correct$trial_type, initiation_time = m_measures$measures$initiation_time)
head(data_initiation_time)
t_test_initiation_time <- data_initiation_time %>%
group_by(subject_nr, trial_type) %>%
dplyr::summarise(mean_initiation_time = mean(initiation_time))
t_test_initiation_time_wide <- pivot_wider(t_test_initiation_time, names_from = trial_type, values_from = mean_initiation_time)
t.test(t_test_initiation_time_wide$control, t_test_initiation_time_wide$cohort, paired = TRUE, alternative = "two.sided")
mean(t_test_initiation_time_wide$control)
mean(t_test_initiation_time_wide$cohort)
model_initiation_time <- lmerTest::lmer(initiation_time~trial_type + (1|subject_nr), data = data_initiation_time)
summary(model_initiation_time)
data_duration_time <- data.frame(subject_nr = spivey_df_short_correct$subject_nr, trial_type = spivey_df_short_correct$trial_type, duration_time = spivey_df_short_correct$response_time - m_measures$measures$initiation_time, response_time = spivey_df_short_correct$response_time, initiation_time = m_measures$measures$initiation_time)
head(data_duration_time)
t_test_duration_time <- data_duration_time %>%
group_by(subject_nr, trial_type) %>%
dplyr::summarise(mean_duration_time = mean(duration_time))
t_test_duration_time_wide <- pivot_wider(t_test_duration_time, names_from = trial_type, values_from = mean_duration_time)
t.test(t_test_duration_time_wide$control, t_test_duration_time_wide$cohort, paired = TRUE, alternative = "two.sided")
mean(t_test_duration_time_wide$control)
mean(t_test_duration_time_wide$cohort)
model_duration_time <- lmerTest::lmer(duration_time~trial_type + (1|subject_nr), data = data_duration_time)
summary(model_duration_time)
#remap
m <- mt_remap_symmetric(
m,
use = 'trajectories',
remap_xpos = "left"
)
m_exclude_initiation <- mt_exclude_initiation(m)
m_exclude_initiation <- mt_time_normalize(m_exclude_initiation, nsteps = 101) #creates tn_trajectories
# if we do not exclude initiation, the following should be done
#m <- mt_time_normalize(m, nsteps = 101) #creates tn_trajectories
m <- m_exclude_initiation
#as.data.frame(m$tn_trajectories)
#Final prep of data.
#Make the end and start point together.
m <- mt_align(
m,
use = "tn_trajectories",
save_as = "tn_align_trajec",
dimensions = c("xpos", "ypos"),
coordinates = "isotropic",
align_start = TRUE ,
align_end = TRUE,
align_side = "no",
verbose = FALSE
)
m <- mt_scale_trajectories(
m,
use = "tn_align_trajec",
save_as = "final_trajec",
c("xpos", "ypos"),
center = TRUE,
scale = TRUE,
within_trajectory = FALSE,
prefix = "z_",
transform = NULL
)
#m <- mt_measures(m, use = 'final_trajec')
m <- mt_measures(m, use = 'tn_trajectories')
#mt_check_bimodality(m, use_variables=c("MAD", "AD"), methods = c("BC", "HDS"), grouping_variables="trial_type")
mt_example <- mt_standardize(m, use_variables=c("MAD", "AD"), within="subject_nr")
#mt_example <- mt_standardize(m,use_variables=c("MAD", "AD"), within=c("subject_nr", "trial_type"), prefix="z_")
mt_check_bimodality(mt_example, use_variables=c("MAD", "AD"), methods = c("BC"), grouping_variables="trial_type")
mt_check_bimodality(mt_example, use_variables=c("z_MAD", "z_AD"), methods = c("BC"), grouping_variables="trial_type")
#mt_check_bimodality(m, use_variables=c("MAD", "AD"), methods = c("BC", "HDS"), grouping_variables="trial_type")
#mt_example <- mt_standardize(m, use_variables=c("MAD", "AD"), within="subject_nr")
mt_example <- mt_standardize(m,use_variables=c("MAD", "AD"), within=c("subject_nr", "trial_type"), prefix="z_")
mt_check_bimodality(mt_example, use_variables=c("MAD", "AD"), methods = c("BC"), grouping_variables="trial_type")
mt_check_bimodality(mt_example, use_variables=c("z_MAD", "z_AD"), methods = c("BC"), grouping_variables="trial_type")
m <- mt_import_mousetrap(spivey_df_short_correct)
mt_plot(m, use = "trajectories", x = "xpos", y = "ypos")
mt_plot(m, use = "trajectories", x = "xpos", y = "ypos", color = "trial_type")
#remap
m <- mt_remap_symmetric(m, use = 'trajectories', remap_xpos = "left")
mt_plot(m, use = "trajectories", x = "xpos", y = "ypos")
mt_plot(m, use = "trajectories", x = "xpos", y = "ypos", color = "trial_type")
m <- mt_exclude_initiation(m)
m <- mt_time_normalize(m_exclude_initiation, nsteps = 101) #creates tn_trajectories
mt_plot(m, use = "trajectories", x = "xpos", y = "ypos", color = "trial_type")
m <- mt_import_mousetrap(spivey_df_short_correct)
#remap
m <- mt_remap_symmetric(m, use = 'trajectories', remap_xpos = "left", remap_ypos = "up")
m <- mt_exclude_initiation(m)
m <- mt_time_normalize(m_exclude_initiation, nsteps = 101) #creates tn_trajectories
m <- mt_import_mousetrap(spivey_df_short_correct)
#remap
m <- mt_remap_symmetric(m, use = 'trajectories', remap_xpos = "left", remap_ypos = "up")
m <- mt_exclude_initiation(m)
m <- mt_time_normalize(m_exclude_initiation, nsteps = 101) #creates tn_trajectories
#Final prep of data.
#Make the end and start point together.
m <- mt_align(m, use = "tn_trajectories", save_as = "tn_align_trajec", dimensions = c("xpos", "ypos"), coordinates = "isotropic", align_start = TRUE , align_end = TRUE, align_side = "no", verbose = FALSE)
m <- mt_scale_trajectories(m, use = "tn_align_trajec", save_as = "final_trajec", c("xpos", "ypos"), center = TRUE, scale = TRUE, within_trajectory = FALSE, prefix = "z_", transform = NULL)
m <- mt_measures(m, use = 'tn_trajectories')
#for "degree of curvature" Spivey standardises based on only subject_nr
#I do not calculate "degree of curvature" but use "average deviation from direct path" instead
#mt_check_bimodality(m, use_variables=c("MAD", "AD"), methods = c("BC", "HDS"), grouping_variables="trial_type")
#mt_example <- mt_standardize(m, use_variables=c("MAD", "AD"), within="subject_nr")
m_standardised_subject_nr <- mt_standardize(m,use_variables=c("AD"), within=c("subject_nr"), prefix="z_")
mt_check_bimodality(m_standardised_subject_nr, use_variables=c("z_AD"), methods = c("BC"), grouping_variables="trial_type")
#distributions of average deviation
length(m_standardised_subject_nr$measures$z_AD)
#distributions of average deviation
m_standardised_subject_nr$measures %>%
ggplot(aes(x = z_AD)) +
geom_histogram()
#distributions of average deviation
data.frame(z_AD = m_standardised_subject_nr$measures, trial_type = spivey_df_short_correct$trial_type) %>%
ggplot(aes(x = z_AD, color = trial_type)) +
geom_histogram()
#distributions of average deviation
data.frame(z_AD = m_standardised_subject_nr$measures$z_AD, trial_type = spivey_df_short_correct$trial_type) %>%
ggplot(aes(x = z_AD, color = trial_type)) +
geom_histogram()
#distributions of average deviation
data.frame(z_AD = m_standardised_subject_nr$measures$z_AD, trial_type = spivey_df_short_correct$trial_type) %>%
ggplot(aes(x = z_AD, fill = trial_type)) +
geom_histogram()
#distributions of average deviation
data.frame(z_AD = m_standardised_subject_nr$measures$z_AD, trial_type = spivey_df_short_correct$trial_type) %>%
ggplot(aes(x = z_AD, fill = trial_type)) +
geom_histogram(alpha = 0.2, position = "identity")
#distributions of average deviation
data.frame(z_AD = m_standardised_subject_nr$measures$z_AD, trial_type = spivey_df_short_correct$trial_type) %>%
ggplot(aes(x = z_AD, fill = trial_type)) +
geom_histogram(alpha = 0.4, position = "identity")
#distributions of average deviation
data.frame(z_AD = m_standardised_subject_nr$measures$z_AD, trial_type = spivey_df_short_correct$trial_type) %>%
ggplot(aes(x = z_AD, fill = trial_type)) +
geom_histogram(alpha = 1, position = "identity")
#distributions of average deviation
data.frame(z_AD = m_standardised_subject_nr$measures$z_AD, trial_type = spivey_df_short_correct$trial_type) %>%
ggplot(aes(x = z_AD, fill = trial_type)) +
geom_histogram(alpha = 0.8, position = "identity")
#distributions of average deviation
data.frame(z_AD = m_standardised_subject_nr$measures$z_AD, trial_type = spivey_df_short_correct$trial_type) %>%
ggplot(aes(x = z_AD, fill = trial_type)) +
geom_histogram(alpha = 0.5, position = "identity")
data.frame(z_AD = m_standardised_subject_nr$measures$z_AD, trial_type = spivey_df_short_correct$trial_type) %>%
group_by(trial_type) %>%
summarise(mean = mean(z_AD))
df_zAD <- data.frame(z_AD = m_standardised_subject_nr$measures$z_AD, trial_type = spivey_df_short_correct$trial_type)
df_zAD %>%
filter(trial_type == "control") %>%
mean(z_AD)
df_zAD
df_zAD$z_AD
df_zAD %>%
filter(trial_type == "control")
df_zAD <- data.frame(z_AD = m_standardised_subject_nr$measures$z_AD, trial_type = spivey_df_short_correct$trial_type)
df_filter_control <- df_zAD %>%
filter(trial_type == "control")
mean(df_filter_control$z_AD)
df_zAD %>%
filter(trial_type == "control") %>%
dplyr::summarise(z_AD)
df_zAD %>%
group_by(trial_type) %>%
dplyr::summarise(z_AD)
df_zAD <- data.frame(z_AD = m_standardised_subject_nr$measures$z_AD, trial_type = spivey_df_short_correct$trial_type)
df_zAD %>%
group_by(trial_type) %>%
dplyr::summarise(mean(z_AD))
#for "area under trajectory" Spivey standardises based on subject_nr and trial_type
#mt_check_bimodality(m, use_variables=c("MAD", "AD"), methods = c("BC", "HDS"), grouping_variables="trial_type")
#mt_example <- mt_standardize(m, use_variables=c("MAD", "AD"), within="subject_nr")
m_standardised_subject_nr <- mt_standardize(m,use_variables=c("AUC"), within=c("subject_nr", "trial_type"), prefix="z_")
mt_check_bimodality(m_standardised_subject_nr, use_variables=c("z_AUC"), methods = c("BC"), grouping_variables="trial_type")
df_zAUC <- data.frame(z_AD = m_standardised_subject_nr$measures$z_AUC, trial_type = spivey_df_short_correct$trial_type)
df_zAUC %>%
group_by(trial_type) %>%
dplyr::summarise(mean(z_AUC))
df_zAUC <- data.frame(z_AUC = m_standardised_subject_nr$measures$z_AUC, trial_type = spivey_df_short_correct$trial_type)
df_zAUC %>%
group_by(trial_type) %>%
dplyr::summarise(mean(z_AUC))
ks.test(filter(df_zAUC, trial_type == "control")$z_AUC, filter(df_zAUC, trial_type == "cohort")$z_AUC)
?var
df_zAUC <- data.frame(z_AUC = m_standardised_subject_nr$measures$z_AUC, trial_type = spivey_df_short_correct$trial_type)
df_zAUC %>%
group_by(trial_type) %>%
dplyr::summarise(mean = mean(z_AUC) variance = var(z_AUC))
df_zAUC <- data.frame(z_AUC = m_standardised_subject_nr$measures$z_AUC, trial_type = spivey_df_short_correct$trial_type)
df_zAUC %>%
group_by(trial_type) %>%
dplyr::summarise(mean = mean(z_AUC), variance = var(z_AUC))
df_zAUC%>%
ggplot(aes(x = z_AUC, fill = trial_type)) +
geom_histogram(alpha = 0.5, position = "identity")
df_zAD <- data.frame(z_AD = m_standardised_subject_nr$measures$z_AD, trial_type = spivey_df_short_correct$trial_type)
#for "degree of curvature" Spivey standardises based on only subject_nr
#I do not calculate "degree of curvature" but use "average deviation from direct path" instead
#mt_check_bimodality(m, use_variables=c("MAD", "AD"), methods = c("BC", "HDS"), grouping_variables="trial_type")
#mt_example <- mt_standardize(m, use_variables=c("MAD", "AD"), within="subject_nr")
m_standardised_subject_nr <- mt_standardize(m,use_variables=c("AD"), within=c("subject_nr"), prefix="z_")
mt_check_bimodality(m_standardised_subject_nr, use_variables=c("z_AD"), methods = c("BC"), grouping_variables="trial_type")
df_zAD <- data.frame(z_AD = m_standardised_subject_nr$measures$z_AD, trial_type = spivey_df_short_correct$trial_type)
df_zAD %>%
group_by(trial_type) %>%
dplyr::summarise(mean(z_AD), variance = var(z_AD))
#if Spivey actually just means AUC when talking about "degree of curvature" then the following could be used
m_standardised_subject_nr <- mt_standardize(m,use_variables=c("AUC"), within=c("subject_nr"), prefix="z_")
mt_check_bimodality(m_standardised_subject_nr, use_variables=c("z_AUC"), methods = c("BC"), grouping_variables="trial_type")
df_zAUC <- data.frame(z_AUC = m_standardised_subject_nr$measures$z_AUC, trial_type = spivey_df_short_correct$trial_type)
df_zAUC %>%
group_by(trial_type) %>%
dplyr::summarise(mean = mean(z_AUC), variance = var(z_AUC))
t_test_accuracy
pivot_wider(t_test_accuracy, names_from = trial_type, values_from = subject_accuracy)
t_test_accuracy_wide <- pivot_wider(t_test_accuracy, names_from = trial_type, values_from = subject_accuracy)
t.test(t_test_accuracy_wide$cohort, t_test_accuracy_wide$control)
t.test(t_test_accuracy_wide$cohort, t_test_accuracy_wide$control, paired = TRUE)
t_test_accuracy_wide <- pivot_wider(t_test_accuracy, names_from = trial_type, values_from = subject_accuracy)
t_test_accuracy %>%
group_by(trial_type) %>%
dplyr::summarise(mean = mean(subject_accuracy))
