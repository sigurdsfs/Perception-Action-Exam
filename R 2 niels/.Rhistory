use = 'trajectories',
color = 'trial_type'
)
m <- mt_time_normalize(m, nsteps = 101) #creates tn_trajectories
as.data.frame(m$tn_trajectories)
mt_plot(
m,
use = 'tn_trajectories',
color = 'trial_type'
)
mt_plot(
m,
x = 'timestamps',
y = 'xpos',
use = 'tn_trajectories',
color = 'trial_type'
)
#Final prep of data.
#Make the end and start point together.
m <- mt_align(
m,
use = "tn_trajectories",
save_as = "tn_align_trajec",
dimensions = c("xpos", "ypos"),
coordinates = "isotropic",
align_start = TRUE ,
align_end = TRUE,
align_side = "no",
verbose = FALSE
)
#Standardize trajectories following Z-distirbution
m <- mt_scale_trajectories(
m,
use = "tn_align_trajec",
save_as = "final_trajec",
c("xpos", "ypos"),
center = TRUE,
scale = TRUE,
within_trajectory = FALSE,
prefix = "z_",
transform = NULL
)
mt_plot_aggregate(
m,
use = 'tn_align_trajec',
color = 'trial_type'
) +
labs(
title = 'Aggregated time-normalized mouse trajectories')
#Measures calculated using tn (time normalized and space normalized)
m <- mt_measures(
m,
use = 'tn_trajectories')
#### FIX ### LOOK AT WITH NIELS.
#derivs calculated using tn (time normalized) (we did not space normalize but maybe that is ok)
m <- mt_derivatives(
m,
save_as = 'deriv',
use = "tn_trajectories",
dimensions = c("xpos", "ypos"),
timestamps = "timestamps",
prefix = "",
absolute = FALSE,
return_delta_time = FALSE,
verbose = FALSE
)
derivs <- mt_export_wide(m$deriv)
toMatch <- c("acc", "vel", "time", "dist")
derivs <- derivs[, grepl(paste(toMatch, collapse = "|"), names(derivs))]
trajec <- mt_export_wide(m$final_trajec)
toMatch2 <- c("z_")
trajecs_ok <- trajec[, grepl(paste(toMatch2, collapse = "|"), names(trajec))]
spivey_df_data <- cbind(trajecs_ok, derivs, m$data)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, lme4, readbulk)
pacman::p_load(MASS,lme4,GGally,ggpubr, reshape, boot)
pacman::p_load(ellipse, tidyverse, Hmisc, plyr)
pacman::p_load(pROC, devtools, reshape2, mousetrap)
spivey_df <- read_bulk("../Our_data/", extension = "csv")
spivey_df_short <- spivey_df %>%
dplyr::select(left_stimuli_1, right_stimuli_1, timestamps_mouse, sound, practice, timestamps_mouse, xpos_mouse, ypos_mouse, response, response_time, count_trial_sequence, correct_response, correct, subject_nr, trial_type, live_row )
write_csv(spivey_df_short, "mouse_spivey_short.csv")
#Subset for Accuracy == TRUE.
spivey_df_short_correct <- subset(spivey_df_short, correct == 1)
spiey_df_shot_correct <- subset(spivey_df_short_correct, practice == "no")
#TUrn Subject into factor
spivey_df_short_correct$subject_nr <- factor(spivey_df_short_correct$subject_nr)
print(c(nrow(spivey_df_short_correct)/nrow(spivey_df_short)*100, "% correct"))
m <- mt_import_mousetrap(spivey_df_short_correct)
mt_plot(data = m , use = "trajectories", color = "trial_type")
#remap
m <- mt_remap_symmetric(
m,
use = 'trajectories',
remap_xpos = "left"
)
mt_plot(
m,
use = 'trajectories',
color = 'trial_type'
)
# plot with timestamps
mt_plot(
m,
x = 'timestamps', # modifying the x-axis to plot timestamps
y = 'xpos',       # modifying the y-axis to plot the xpos
use = 'trajectories',
color = 'trial_type'
)
m <- mt_exclude_initiation(m)
mt_plot(
m,
x = 'timestamps',
y = 'xpos',
use = 'trajectories',
color = 'trial_type'
)
m <- mt_time_normalize(m, nsteps = 101) #creates tn_trajectories
as.data.frame(m$tn_trajectories)
mt_plot(
m,
use = 'tn_trajectories',
color = 'trial_type'
)
mt_plot(
m,
x = 'timestamps',
y = 'xpos',
use = 'tn_trajectories',
color = 'trial_type'
)
#Final prep of data.
#Make the end and start point together.
m <- mt_align(
m,
use = "tn_trajectories",
save_as = "tn_align_trajec",
dimensions = c("xpos", "ypos"),
coordinates = "norm",
align_start = TRUE ,
align_end = TRUE,
align_side = "no",
verbose = FALSE
)
#Standardize trajectories following Z-distirbution
m <- mt_scale_trajectories(
m,
use = "tn_align_trajec",
save_as = "final_trajec",
c("xpos", "ypos"),
center = TRUE,
scale = TRUE,
within_trajectory = FALSE,
prefix = "z_",
transform = NULL
)
mt_plot_aggregate(
m,
use = 'tn_align_trajec',
color = 'trial_type'
) +
labs(
title = 'Aggregated time-normalized mouse trajectories')
#Measures calculated using tn (time normalized and space normalized)
m <- mt_measures(
m,
use = 'tn_trajectories')
#### FIX ### LOOK AT WITH NIELS.
#derivs calculated using tn (time normalized) (we did not space normalize but maybe that is ok)
m <- mt_derivatives(
m,
save_as = 'deriv',
use = "tn_trajectories",
dimensions = c("xpos", "ypos"),
timestamps = "timestamps",
prefix = "",
absolute = FALSE,
return_delta_time = FALSE,
verbose = FALSE
)
derivs <- mt_export_wide(m$deriv)
toMatch <- c("acc", "vel", "time", "dist")
derivs <- derivs[, grepl(paste(toMatch, collapse = "|"), names(derivs))]
trajec_norm <- mt_export_wide(m$final_trajec)
toMatch2 <- c("z_")
trajecs_ok <- trajec[, grepl(paste(toMatch2, collapse = "|"), names(trajec))]
spivey_df_data <- cbind(trajecs_ok, derivs, m$data)
View(trajec)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, lme4, readbulk)
pacman::p_load(MASS,lme4,GGally,ggpubr, reshape, boot)
pacman::p_load(ellipse, tidyverse, Hmisc, plyr)
pacman::p_load(pROC, devtools, reshape2, mousetrap)
spivey_df <- read_bulk("../Our_data/", extension = "csv")
spivey_df_short <- spivey_df %>%
dplyr::select(left_stimuli_1, right_stimuli_1, timestamps_mouse, sound, practice, timestamps_mouse, xpos_mouse, ypos_mouse, response, response_time, count_trial_sequence, correct_response, correct, subject_nr, trial_type, live_row )
write_csv(spivey_df_short, "mouse_spivey_short.csv")
#Subset for Accuracy == TRUE.
spivey_df_short_correct <- subset(spivey_df_short, correct == 1)
spiey_df_shot_correct <- subset(spivey_df_short_correct, practice == "no")
#TUrn Subject into factor
spivey_df_short_correct$subject_nr <- factor(spivey_df_short_correct$subject_nr)
print(c(nrow(spivey_df_short_correct)/nrow(spivey_df_short)*100, "% correct"))
m <- mt_import_mousetrap(spivey_df_short_correct)
mt_plot(data = m , use = "trajectories", color = "trial_type")
#remap
m <- mt_remap_symmetric(
m,
use = 'trajectories',
remap_xpos = "left"
)
mt_plot(
m,
use = 'trajectories',
color = 'trial_type'
)
# plot with timestamps
mt_plot(
m,
x = 'timestamps', # modifying the x-axis to plot timestamps
y = 'xpos',       # modifying the y-axis to plot the xpos
use = 'trajectories',
color = 'trial_type'
)
m <- mt_exclude_initiation(m)
mt_plot(
m,
x = 'timestamps',
y = 'xpos',
use = 'trajectories',
color = 'trial_type'
)
m <- mt_time_normalize(m, nsteps = 101) #creates tn_trajectories
as.data.frame(m$tn_trajectories)
mt_plot(
m,
use = 'tn_trajectories',
color = 'trial_type'
)
mt_plot(
m,
x = 'timestamps',
y = 'xpos',
use = 'tn_trajectories',
color = 'trial_type'
)
#Final prep of data.
#Make the end and start point together.
m <- mt_align(
m,
use = "tn_trajectories",
save_as = "tn_align_trajec",
dimensions = c("xpos", "ypos"),
coordinates = "norm",
align_start = TRUE ,
align_end = TRUE,
align_side = "no",
verbose = FALSE
)
#Standardize trajectories following Z-distirbution
m <- mt_scale_trajectories(
m,
use = "tn_align_trajec",
save_as = "final_trajec",
c("xpos", "ypos"),
center = TRUE,
scale = TRUE,
within_trajectory = FALSE,
prefix = "z_",
transform = NULL
)
mt_plot_aggregate(
m,
use = 'tn_align_trajec',
color = 'trial_type'
) +
labs(
title = 'Aggregated time-normalized mouse trajectories')
#Measures calculated using tn (time normalized and space normalized)
m <- mt_measures(
m,
use = 'tn_trajectories')
#### FIX ### LOOK AT WITH NIELS.
#derivs calculated using tn (time normalized) (we did not space normalize but maybe that is ok)
m <- mt_derivatives(
m,
save_as = 'deriv',
use = "tn_trajectories",
dimensions = c("xpos", "ypos"),
timestamps = "timestamps",
prefix = "",
absolute = FALSE,
return_delta_time = FALSE,
verbose = FALSE
)
derivs <- mt_export_wide(m$deriv)
toMatch <- c("acc", "vel", "time", "dist")
derivs <- derivs[, grepl(paste(toMatch, collapse = "|"), names(derivs))]
trajec_norm <- mt_export_long(m$final_trajec)
toMatch2 <- c("z_")
trajecs_ok <- trajec[, grepl(paste(toMatch2, collapse = "|"), names(trajec))]
spivey_df_data <- cbind(trajecs_ok, derivs, m$data)
write_csv(spivey_df_data, "spivey_norm_derv_data.csv")
#ORDER: X, Y, ACC, dist, time, vel
#DESIRED: X, y, V ,A
oldnames <- c(colnames(spivey_df_data)[1:202],colnames(spivey_df_data)[506:606], colnames(spivey_df_data)[203:303])
#Time , X , Y , Steps, dist, vel , acc
new_names <- c(#paste0("t",sprintf('%0.3d', 1:101)),
paste0("x",sprintf('%0.3d', 1:101)),
paste0("y",sprintf('%0.3d', 1:101)),
#paste0("s",sprintf('%0.3d', 1:101)),
#paste0("d",sprintf('%0.3d', 1:101)),
paste0("v",sprintf('%0.3d', 1:101)),
paste0("a",sprintf('%0.3d', 1:101)))
pacman::p_load(data.table)
setnames(spivey_df_data, old = oldnames, new = new_names)
setnames(spivey_df_data, old = c("subject_nr", "live_row", "trial_type", "response"), new = c("Subject", "Item.number", "Polarity", "Response"))
#Turn numeric
x <- paste0('x', sprintf("%03d", c(1:101)))
y <- paste0('y', sprintf("%03d", c(1:101)))
a <- paste0('a', sprintf("%03d", c(1:101)))
v <- paste0('v', sprintf("%03d", c(1:101)))
# <- paste0('t', sprintf("%03d", c(1:101)))
spivey_df_data[y] <- sapply(spivey_df_data[y],as.numeric)
spivey_df_data[x] <- sapply(spivey_df_data[x],as.numeric)
spivey_df_data[v] <- sapply(spivey_df_data[v],as.numeric)
spivey_df_data[a] <- sapply(spivey_df_data[a],as.numeric)
#normalized_positions_tr_spivey[t] <- sapply(normalized_positions_tr_spivey[t],as.numeric)
#Select only those with X,Y,V,A
all_data_columns_spivey <- names(dplyr::select(spivey_df_data,
starts_with("x"),
starts_with("y"),
starts_with("v"),
starts_with("a")))
normalized_positions.new.spivey <- spivey_df_data %>%
dplyr::select(Subject, Item.number, Polarity, Response, one_of(all_data_columns_spivey))
#write_csv(normalized_positions.new.spivey, "spivey_data_normalized_newnames_subset.csv")
#Find Constant Col's
constant_columns_ctl <- normalized_positions.new.spivey %>%
filter(Polarity == "control") %>%
dplyr::select(starts_with("x"), starts_with("y"), starts_with('v'), starts_with('a')) %>%
find_constant
constant_columns_nctl <- normalized_positions.new.spivey %>%
filter(Polarity == "cohort") %>%
dplyr::select(starts_with("x"), starts_with("y"), starts_with('v'),starts_with('a')) %>%
find_constant
constant_columns <- c(constant_columns_ctl, constant_columns_nctl)
#Remove constant col
normalized_positions_tr_spivey <- dplyr::select(normalized_positions.new.spivey,
-one_of(constant_columns))
#Another way to remove constant col's
normalized_positions_tr_spivey_2 <- normalized_positions.new.spivey[ , which(apply(normalized_positions_tr_spivey, 2, var) != 0)]
all_data_columns_spivey2 <- names(dplyr::select(normalized_positions_tr_spivey,
starts_with("x"),
starts_with("y"),
starts_with("v"),
starts_with("a")))
normalized_positions_tr_spivey[all_data_columns_spivey2] <- sapply(normalized_positions_tr_spivey[all_data_columns_spivey2],as.numeric)
final_PCA_DATA <- normalized_positions_tr_spivey %>%
dplyr::select(one_of(all_data_columns))
#Do PCA on the entire data
prcomp(final_PCA_DATA, center = TRUE, scale = TRUE)
load("/Users/sigurd/Documents/Perception and Action/Perception-Action-Exam/R 2/LDA-Full.RData") #load m_pca etc.
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, lme4, readbulk)
pacman::p_load(MASS,lme4,GGally,ggpubr, reshape, boot)
pacman::p_load(ellipse, tidyverse, Hmisc, plyr)
pacman::p_load(pROC, devtools, reshape2, mousetrap)
spivey_df <- read_bulk("../Our_data/", extension = "csv")
spivey_df_short <- spivey_df %>%
dplyr::select(left_stimuli_1, right_stimuli_1, timestamps_mouse, sound, practice, timestamps_mouse, xpos_mouse, ypos_mouse, response, response_time, count_trial_sequence, correct_response, correct, subject_nr, trial_type, live_row )
write_csv(spivey_df_short, "mouse_spivey_short.csv")
#Subset for Accuracy == TRUE.
spivey_df_short_correct <- subset(spivey_df_short, correct == 1)
spiey_df_shot_correct <- subset(spivey_df_short_correct, practice == "no")
#TUrn Subject into factor
spivey_df_short_correct$subject_nr <- factor(spivey_df_short_correct$subject_nr)
print(c(nrow(spivey_df_short_correct)/nrow(spivey_df_short)*100, "% correct"))
m <- mt_import_mousetrap(spivey_df_short_correct)
mt_plot(data = m , use = "trajectories", color = "trial_type")
#remap
m <- mt_remap_symmetric(
m,
use = 'trajectories',
remap_xpos = "left"
)
mt_plot(
m,
use = 'trajectories',
color = 'trial_type'
)
# plot with timestamps
mt_plot(
m,
x = 'timestamps', # modifying the x-axis to plot timestamps
y = 'xpos',       # modifying the y-axis to plot the xpos
use = 'trajectories',
color = 'trial_type'
)
m <- mt_exclude_initiation(m)
mt_plot(
m,
x = 'timestamps',
y = 'xpos',
use = 'trajectories',
color = 'trial_type'
)
m <- mt_time_normalize(m, nsteps = 101) #creates tn_trajectories
as.data.frame(m$tn_trajectories)
mt_plot(
m,
use = 'tn_trajectories',
color = 'trial_type'
)
mt_plot(
m,
x = 'timestamps',
y = 'xpos',
use = 'tn_trajectories',
color = 'trial_type'
)
#Final prep of data.
#Make the end and start point together.
m <- mt_align(
m,
use = "tn_trajectories",
save_as = "tn_align_trajec",
dimensions = c("xpos", "ypos"),
coordinates = "isotropic",
align_start = TRUE ,
align_end = TRUE,
align_side = "no",
verbose = FALSE
)
#Standardize trajectories following Z-distirbution
m <- mt_scale_trajectories(
m,
use = "tn_align_trajec",
save_as = "final_trajec",
c("xpos", "ypos"),
center = TRUE,
scale = TRUE,
within_trajectory = FALSE,
prefix = "z_",
transform = NULL
)
mt_plot_aggregate(
m,
use = 'tn_align_trajec',
color = 'trial_type'
) +
labs(
title = 'Aggregated time-normalized mouse trajectories')
#Measures calculated using tn (time normalized and space normalized)
m <- mt_measures(
m,
use = 'tn_trajectories')
#### FIX ### LOOK AT WITH NIELS.
#derivs calculated using tn (time normalized) (we did not space normalize but maybe that is ok)
m <- mt_derivatives(
m,
save_as = 'deriv',
use = "tn_trajectories",
dimensions = c("xpos", "ypos"),
timestamps = "timestamps",
prefix = "",
absolute = FALSE,
return_delta_time = FALSE,
verbose = FALSE
)
derivs <- mt_export_wide(m$deriv)
toMatch <- c("acc", "vel", "time", "dist")
derivs <- derivs[, grepl(paste(toMatch, collapse = "|"), names(derivs))]
trajec <- mt_export_long(m$final_trajec)
toMatch2 <- c("z_")
trajecs_ok <- trajec[, grepl(paste(toMatch2, collapse = "|"), names(trajec))]
spivey_df_data <- cbind(trajecs_ok, derivs, m$data)
View(trajec)
View(trajec_norm)
View(negation_data_true)
View(negation_data_true)
roc(negation_data_true$Polarity, negation_data_true$X.flips)
blabla <- roc(negation_data_true$Polarity, negation_data_true$X.flips)
blabla$auc
blabla$original.predictor
blabla$predictor
blabla$percent
blabla$thresholds
plot(blabla)
a <- rnorm(50, mean = 1, sd = 2)
b <- rnorm(50, mean = 4, sd = 2)
histogram(a)
histogram(b)
histogram(a);histogram(b)
ggplot()+geom_histogram(aes(x = a, color = red, alpha = 0.5))+geom_histogram(aes(x = b, color = blue, alpha = 0.5))
ggplot()+geom_histogram(aes(x = a, color = "red", alpha = 0.5))+geom_histogram(aes(x = b, color = "blue", alpha = 0.5))
ggplot()+geom_histogram(aes(x = a, color = "red", alpha = 0.5), binwidth = 10)+geom_histogram(aes(x = b, color = "blue", alpha = 0.5), binwidth = 10)
ggplot()+geom_histogram(aes(x = a, color = "red", alpha = 0.5), binwidth = 5)+geom_histogram(aes(x = b, color = "blue", alpha = 0.5), binwidth = 5)
ggplot()+geom_histogram(aes(x = a, color = "red", alpha = 0.5), binwidth = 2)+geom_histogram(aes(x = b, color = "blue", alpha = 0.5), binwidth = 2)
ggplot()+geom_histogram(aes(x = a, fill = "red", alpha = 0.5), binwidth = 1.4)+geom_histogram(aes(x = b, fill = "blue", alpha = 0.5), binwidth = 1.4)
rep(50, 0)
?rep
rep(0,50)
c <- rep(0,50)
d <- rep(1, 50)
e <- roc(c(c,d), c(a,b))
plot(e)
e$thresholds
e$sensitivities
ggplot()+geom_histogram(aes(x = a, fill = "red", alpha = 0.5), binwidth = 1.4)+geom_histogram(aes(x = b, fill = "blue", alpha = 0.5), binwidth = 1.4)
min(b)
citation(package = "lmerTest")
